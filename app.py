import streamlit as st
from streamlit_chat import message
import time
# from streamlit_extras.add_vertical_space import add_vertical_space
# import subprocess
# import numpy as np
from llama_index import VectorStoreIndex, ServiceContext
from llama_index.llms import OpenAI
from llama_index import SimpleDirectoryReader
import openai
import random
import string


st.set_page_config(page_title="SCL System Customer Service Chatbot")

with st.sidebar:
    st.title('ðŸ¤—ðŸ’¬ SCL System Customer Service Chatbot')
    st.write('''
Our product is Enclosure Boxes

4 screws: S series
 
Hinge and Type: P series

You are able to key in the Specification and Model and Size           
             
*Chatbot Terms and Conditions:*

*Introduction:*
Welcome to the SCL System Customer Service Chatbot! Before you engage with our chatbot, please take a moment to review and understand the following terms and conditions. Your use of the chatbot implies your agreement to comply with these terms.

*Capabilities:*
1. *Informational Assistance:* The chatbot is designed to offer information and assistance related to our products and services.
2. *Query Resolution:* It can help address common queries, guide you through processes, and provide relevant information.
3. *Limited Personalization:* The chatbot may use minimal personal information to enhance user experience but does not store or process sensitive data.

*Restrictions:*
1. *No Legal Advice:* The chatbot does not provide legal advice or opinions. For legal matters, consult a professional.
2. *Limited Scope:* The chatbot's capabilities are confined to predefined tasks and information related to our products and services.
3. *No Financial Transactions:* The chatbot does not facilitate or process financial transactions. Please use our official channels for such transactions.

*Data Usage and Privacy:*
1. *Data Collection:* The chatbot may collect limited personal information to improve user experience and address queries. This data is handled according to our privacy policy.
2. *Security Measures:* We employ security measures to safeguard the data collected by the chatbot. However, avoid sharing sensitive personal information.

*Consent:*
1. *Express Consent:* Before collecting any sensitive data or using it beyond the chatbot's scope, we will seek your express consent.
2. *Opt-out Option:* You can opt-out of sharing information or terminate the chat at any time.

*Liability:*
1. *No Guarantees:* While the chatbot aims for accuracy, we do not guarantee its completeness or accuracy.
2. *Limited Liability:* We are not liable for any loss or damage resulting from the use of the chatbot.

Link Warning:
Warning: The link generated by the chatbot is provided without liability.             

*Termination:*
We reserve the right to terminate or suspend chatbot services without notice.

*Updates:*
These terms and conditions may be updated periodically. Your continued use of the chatbot implies acceptance of the latest version.

By using our Customer Service Chatbot, you acknowledge that you have read, understood, and agreed to these terms and conditions. 
If you disagree, please refrain from using the chatbot. For questions or concerns, contact our customer support through official channels.

Contact Us
SCL System Enterprise Pte Ltd,
41 Jalan Pemimpin,
#02-01A Kong Beng Industrial Building,
Singapore 577186

Phone/WhatsApp: +65-62599968

Fax: +65-62599282

Email: sales@sclsystem.com.sg

Copyright Â© 2023 SCL SystemTerms & Conditions | Privacy Policy''')
    

openai.api_key = st.secrets["OPENAI_API_KEY"]

if "messages" not in st.session_state.keys(): # Initialize the chat message history
    st.session_state.messages = [
        {"role": "assistant", "content": "Hi, I am Felis, ask me any question about SCL System Products!"}
    ]
    with st.expander("messages History"):
         st.session_state.prompt = ""

@st.cache_resource(show_spinner=False)
def load_data():
    with st.spinner(text="Loading and indexing the Streamlit docs â€“ hang tight! This should take a few seconds."):
        reader = SimpleDirectoryReader(input_dir=r"C:\Users\somew\OneDrive\Desktop\Chatbot\Industial_data_draft", recursive=True)
        docs = reader.load_data()
        service_context = ServiceContext.from_defaults(llm=OpenAI(model="gpt-3.5-turbo", temperature=0.5, system_prompt="You are an expert with 23 years of experience and knowledge in industrial control and automation components and It is your responsibility to figure out what the client wants.Keep your answers technical and straight to the point and based on reputable sources â€“ do not hallucinate features."))
        index = VectorStoreIndex.from_documents(docs, service_context=service_context)
        return index

index = load_data()

chat_engine = index.as_chat_engine(chat_mode="context", verbose=True)



    
if prompt := st.chat_input("Your Inquries"): # Prompt for user input and save to chat history
    user = st.session_state.messages.append({"role": "user", "content": prompt})

# st.sidebar.button('Clear Chat History', on_click=clear_chat_history)
       

for message in st.session_state.messages: # Display the prior chat messages
    with st.chat_message(message["role"]):
        st.write(message["content"])
        

# If last message is not from assistant, generate a new response
if st.session_state.messages and st.session_state.messages[-1]["role"] != "assistant":
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
            response = chat_engine.chat(prompt)
            st.write(response.response)
            message = {"role": "assistant", "content": response.response}
            st.session_state.messages.append(message)  # Add response to message history

def clear_chat_history():
    st.session_state.messages = [
        {"role": "assistant", "content": "Hi, I am Kafka, ask me any question about SCL System Products!"}
    ]
    st.session_state.prompt = ""
    st.session_state.generated = []
    st.write("Chat history cleared.")

# Button to trigger the clear_chat_history function
st.button("Clear History", key="clear_history", on_click=clear_chat_history)